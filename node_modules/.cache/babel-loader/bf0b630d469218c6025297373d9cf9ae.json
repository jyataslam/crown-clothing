{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport UserActionTypes from \"./user.types\";\nimport { SignInSuccess, SignInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from \"./user.actions\";\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\"; // reusable generator function for use with sign in methods\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(SignInFailure(error.message));\n  }\n} // create the google sign in popup\n// get back userAuth object that has the user details on the user key\n// call createUserProfileDocument and use useAuth object to get the userRef\n// get snapshot using userRef and put out the success\n// the success method will update userReducer using the object that is being passed to it\n\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error.message));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error.message));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    console.log(\"object\", userAuth); // if no user (is null) just return out of it\n\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* signOutStart() {\n  try {\n    yield auth.signOut(); // 'put' is Saga's way of dispatching. signOutSuccess is coming from the actions which will then go to the reducer\n\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n} // listener that listens for the start of our API call, giving it the respective object that it needs (second parameter)\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n} // listener that listens for the start of our API call, giving it the respective object that it needs (second parameter)\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n} // listener that listens for the start of our API call, giving it the respective object that it needs (second parameter)\n\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n} // listener that listens for the start of our API call, giving it the respective object that it needs (second parameter)\n\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOutStart);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["/Users/jyataslam/Desktop/ReactDeveloperCourse/crwn-clothing/client/src/redux/user/user.saga.js"],"names":["takeLatest","put","all","call","UserActionTypes","SignInSuccess","SignInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","message","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","console","log","signOutStart","signOut","signUp","displayName","createUserWithEmailAndPassword","signInAfterSignUp","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\n\nimport UserActionTypes from \"./user.types\";\n\nimport {\n    SignInSuccess,\n    SignInFailure,\n    signOutSuccess,\n    signOutFailure,\n    signUpSuccess,\n    signUpFailure,\n} from \"./user.actions\";\n\nimport {\n    auth,\n    googleProvider,\n    createUserProfileDocument,\n    getCurrentUser,\n} from \"../../firebase/firebase.utils\";\n\n// reusable generator function for use with sign in methods\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n    try {\n        const userRef = yield call(\n            createUserProfileDocument,\n            userAuth,\n            additionalData\n        );\n        const userSnapshot = yield userRef.get();\n        yield put(\n            SignInSuccess({ id: userSnapshot.id, ...userSnapshot.data() })\n        );\n    } catch (error) {\n        yield put(SignInFailure(error.message));\n    }\n}\n\n// create the google sign in popup\n// get back userAuth object that has the user details on the user key\n// call createUserProfileDocument and use useAuth object to get the userRef\n// get snapshot using userRef and put out the success\n// the success method will update userReducer using the object that is being passed to it\nexport function* signInWithGoogle() {\n    try {\n        const { user } = yield auth.signInWithPopup(googleProvider);\n        yield getSnapshotFromUserAuth(user);\n    } catch (error) {\n        yield put(SignInFailure(error.message));\n    }\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n    try {\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        yield getSnapshotFromUserAuth(user);\n    } catch (error) {\n        yield put(SignInFailure(error.message));\n    }\n}\n\nexport function* isUserAuthenticated() {\n    try {\n        const userAuth = yield getCurrentUser();\n        console.log(\"object\", userAuth);\n        // if no user (is null) just return out of it\n        if (!userAuth) return;\n        yield getSnapshotFromUserAuth(userAuth);\n    } catch (error) {\n        yield put(SignInFailure(error));\n    }\n}\n\nexport function* signOutStart() {\n    try {\n        yield auth.signOut();\n        // 'put' is Saga's way of dispatching. signOutSuccess is coming from the actions which will then go to the reducer\n        yield put(signOutSuccess());\n    } catch (error) {\n        yield put(signOutFailure(error));\n    }\n}\n\nexport function* signUp({ payload: { email, password, displayName } }) {\n    try {\n        const { user } = yield auth.createUserWithEmailAndPassword(\n            email,\n            password\n        );\n        yield put(signUpSuccess({ user, additionalData: { displayName } }));\n    } catch (error) {\n        yield put(signUpFailure(error));\n    }\n}\n\nexport function* signInAfterSignUp({ payload: { user, additionalData } }) {\n    yield getSnapshotFromUserAuth(user, additionalData);\n}\n\n// listener that listens for the start of our API call, giving it the respective object that it needs (second parameter)\nexport function* onGoogleSignInStart() {\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\n// listener that listens for the start of our API call, giving it the respective object that it needs (second parameter)\nexport function* onEmailSignInStart() {\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\n// listener that listens for the start of our API call, giving it the respective object that it needs (second parameter)\nexport function* onCheckUserSession() {\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\n// listener that listens for the start of our API call, giving it the respective object that it needs (second parameter)\nexport function* onSignOutStart() {\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOutStart);\n}\n\nexport function* onSignUpStart() {\n    yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\n\nexport function* onSignUpSuccess() {\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\n\nexport function* userSagas() {\n    yield all([\n        call(onGoogleSignInStart),\n        call(onEmailSignInStart),\n        call(onCheckUserSession),\n        call(onSignOutStart),\n        call(onSignUpStart),\n        call(onSignUpSuccess),\n    ]);\n}\n"]},"metadata":{},"sourceType":"module"}