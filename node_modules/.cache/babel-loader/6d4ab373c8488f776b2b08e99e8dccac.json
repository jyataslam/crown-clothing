{"ast":null,"code":"import { takeEvery, call } from \"redux-saga/effects\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shop.actions\";\nimport ShopActionTypes from \"./shop.types\";\nexport function* fetchCollectionsAsync() {\n  yield console.log(\"I am fired\");\n\n  try {\n    // get the collection reference from our firestore db\n    const collectionRef = firestore.collection(\"collections\"); // will return a promise which gets resolved in the form of our collectionRef which is set into our snapshot const -->\n    // <-- instead of chaining .then and setting our collectionsMap within the Promise\n\n    const snapshot = yield collectionRef.get(); // 'call' is the effect inside our generator function that invokes the method 'convertCollectionsSnapshotToMap'\n    // 'call' just invokes functions. first argument is a function/method and latter arguments are the parameters you passed into your first argument function call\n\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n  } catch (error) {} // collectionRef\n  //     .get()\n  //     .then(snapshot => {\n  //         const collectionsMap =\n  //             convertCollectionsSnapshotToMap(snapshot);\n  //         dispatch(fetchCollectionsSuccess(collectionsMap));\n  //     })\n  //     .catch(error => dispatch(fetchCollectionsFailure(error.message)));\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/jyataslam/Desktop/ReactDeveloperCourse/crwn-clothing/src/redux/shop/shop.saga.js"],"names":["takeEvery","call","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","ShopActionTypes","fetchCollectionsAsync","console","log","collectionRef","collection","snapshot","get","collectionsMap","error","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,QAAgC,oBAAhC;AAEA,SACIC,SADJ,EAEIC,+BAFJ,QAGO,+BAHP;AAKA,SACIC,uBADJ,EAEIC,uBAFJ,QAGO,gBAHP;AAKA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;;AAEA,MAAI;AACA;AACA,UAAMC,aAAa,GAAGR,SAAS,CAACS,UAAV,CAAqB,aAArB,CAAtB,CAFA,CAIA;AACA;;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB,CANA,CAQA;AACA;;AACA,UAAMC,cAAc,GAAG,MAAMb,IAAI,CAC7BE,+BAD6B,EAE7BS,QAF6B,CAAjC;AAIH,GAdD,CAcE,OAAOG,KAAP,EAAc,CAAE,CAjBmB,CAmBrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACH;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMhB,SAAS,CACXM,eAAe,CAACW,uBADL,EAEXV,qBAFW,CAAf;AAIH","sourcesContent":["import { takeEvery, call } from \"redux-saga/effects\";\n\nimport {\n    firestore,\n    convertCollectionsSnapshotToMap,\n} from \"../../firebase/firebase.utils\";\n\nimport {\n    fetchCollectionsSuccess,\n    fetchCollectionsFailure,\n} from \"./shop.actions\";\n\nimport ShopActionTypes from \"./shop.types\";\n\nexport function* fetchCollectionsAsync() {\n    yield console.log(\"I am fired\");\n\n    try {\n        // get the collection reference from our firestore db\n        const collectionRef = firestore.collection(\"collections\");\n\n        // will return a promise which gets resolved in the form of our collectionRef which is set into our snapshot const -->\n        // <-- instead of chaining .then and setting our collectionsMap within the Promise\n        const snapshot = yield collectionRef.get();\n\n        // 'call' is the effect inside our generator function that invokes the method 'convertCollectionsSnapshotToMap'\n        // 'call' just invokes functions. first argument is a function/method and latter arguments are the parameters you passed into your first argument function call\n        const collectionsMap = yield call(\n            convertCollectionsSnapshotToMap,\n            snapshot\n        );\n    } catch (error) {}\n\n    // collectionRef\n    //     .get()\n    //     .then(snapshot => {\n    //         const collectionsMap =\n    //             convertCollectionsSnapshotToMap(snapshot);\n    //         dispatch(fetchCollectionsSuccess(collectionsMap));\n    //     })\n    //     .catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\n\nexport function* fetchCollectionsStart() {\n    yield takeEvery(\n        ShopActionTypes.FETCH_COLLECTIONS_START,\n        fetchCollectionsAsync\n    );\n}\n"]},"metadata":{},"sourceType":"module"}