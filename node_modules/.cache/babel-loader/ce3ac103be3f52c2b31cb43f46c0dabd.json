{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport UserActionTypes from \"./user.types\";\nimport { SignInSuccess, SignInFailure, signOutSuccess, signOutFailure } from \"./user.actions\";\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\"; // reusable generator function for use with sign in methods\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(SignInFailure(error.message));\n  }\n} // create the google sign in popup\n// get back userAuth object that has the user details on the user key\n// call createUserProfileDocument and use useAuth object to get the userRef\n// get snapshot using userRef and put out the success\n// the success method will update userReducer using the object that is being passed to it\n\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error.message));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error.message));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    console.log(\"object\", userAuth); // if no user (is null) just return out of it\n\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* signOutStart() {\n  try {\n    yield auth.signOut(); // 'put' is Saga's way of dispatching. signOutSuccess is coming from the actions which will then go to the reducer\n\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n} // listener that listens for the start of our API call, giving it the respective object that it needs (second parameter)\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n} // listener that listens for the start of our API call, giving it the respective object that it needs (second parameter)\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n} // listener that listens for the start of our API call, giving it the respective object that it needs (second parameter)\n\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n} // listener that listens for the start of our API call, giving it the respective object that it needs (second parameter)\n\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOutStart);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart)]);\n}","map":{"version":3,"sources":["/Users/jyataslam/Desktop/ReactDeveloperCourse/crwn-clothing/src/redux/user/user.saga.js"],"names":["takeLatest","put","all","call","UserActionTypes","SignInSuccess","SignInFailure","signOutSuccess","signOutFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","message","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","console","log","signOutStart","signOut","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\n\nimport UserActionTypes from \"./user.types\";\n\nimport {\n    SignInSuccess,\n    SignInFailure,\n    signOutSuccess,\n    signOutFailure,\n} from \"./user.actions\";\n\nimport {\n    auth,\n    googleProvider,\n    createUserProfileDocument,\n    getCurrentUser,\n} from \"../../firebase/firebase.utils\";\n\n// reusable generator function for use with sign in methods\nexport function* getSnapshotFromUserAuth(userAuth) {\n    try {\n        const userRef = yield call(createUserProfileDocument, userAuth);\n        const userSnapshot = yield userRef.get();\n        yield put(\n            SignInSuccess({ id: userSnapshot.id, ...userSnapshot.data() })\n        );\n    } catch (error) {\n        yield put(SignInFailure(error.message));\n    }\n}\n\n// create the google sign in popup\n// get back userAuth object that has the user details on the user key\n// call createUserProfileDocument and use useAuth object to get the userRef\n// get snapshot using userRef and put out the success\n// the success method will update userReducer using the object that is being passed to it\nexport function* signInWithGoogle() {\n    try {\n        const { user } = yield auth.signInWithPopup(googleProvider);\n        yield getSnapshotFromUserAuth(user);\n    } catch (error) {\n        yield put(SignInFailure(error.message));\n    }\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n    try {\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        yield getSnapshotFromUserAuth(user);\n    } catch (error) {\n        yield put(SignInFailure(error.message));\n    }\n}\n\nexport function* isUserAuthenticated() {\n    try {\n        const userAuth = yield getCurrentUser();\n        console.log(\"object\", userAuth);\n        // if no user (is null) just return out of it\n        if (!userAuth) return;\n        yield getSnapshotFromUserAuth(userAuth);\n    } catch (error) {\n        yield put(SignInFailure(error));\n    }\n}\n\nexport function* signOutStart() {\n    try {\n        yield auth.signOut();\n        // 'put' is Saga's way of dispatching. signOutSuccess is coming from the actions which will then go to the reducer\n        yield put(signOutSuccess());\n    } catch (error) {\n        yield put(signOutFailure(error));\n    }\n}\n\n// listener that listens for the start of our API call, giving it the respective object that it needs (second parameter)\nexport function* onGoogleSignInStart() {\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\n// listener that listens for the start of our API call, giving it the respective object that it needs (second parameter)\nexport function* onEmailSignInStart() {\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\n// listener that listens for the start of our API call, giving it the respective object that it needs (second parameter)\nexport function* onCheckUserSession() {\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\n// listener that listens for the start of our API call, giving it the respective object that it needs (second parameter)\nexport function* onSignOutStart() {\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOutStart);\n}\n\nexport function* userSagas() {\n    yield all([\n        call(onGoogleSignInStart),\n        call(onEmailSignInStart),\n        call(onCheckUserSession),\n        call(onSignOutStart),\n    ]);\n}\n"]},"metadata":{},"sourceType":"module"}